//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Notes.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol NoteServiceListCall: ClientCallUnary {}

fileprivate final class NoteServiceListCallBase: ClientCallUnaryBase<Empty, NoteList>, NoteServiceListCall {
  override class var method: String { return "/NoteService/List" }
}

internal protocol NoteServiceGetCall: ClientCallUnary {}

fileprivate final class NoteServiceGetCallBase: ClientCallUnaryBase<NoteRequestId, Note>, NoteServiceGetCall {
  override class var method: String { return "/NoteService/Get" }
}

internal protocol NoteServiceInsertCall: ClientCallUnary {}

fileprivate final class NoteServiceInsertCallBase: ClientCallUnaryBase<Note, Note>, NoteServiceInsertCall {
  override class var method: String { return "/NoteService/Insert" }
}

internal protocol NoteServiceUpdateCall: ClientCallUnary {}

fileprivate final class NoteServiceUpdateCallBase: ClientCallUnaryBase<Note, Note>, NoteServiceUpdateCall {
  override class var method: String { return "/NoteService/Update" }
}

internal protocol NoteServiceDeleteCall: ClientCallUnary {}

fileprivate final class NoteServiceDeleteCallBase: ClientCallUnaryBase<NoteRequestId, Empty>, NoteServiceDeleteCall {
  override class var method: String { return "/NoteService/Delete" }
}


/// Instantiate NoteServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol NoteServiceService: ServiceClient {
  /// Synchronous. Unary.
  func list(_ request: Empty, metadata customMetadata: Metadata) throws -> NoteList
  /// Asynchronous. Unary.
  @discardableResult
  func list(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (NoteList?, CallResult) -> Void) throws -> NoteServiceListCall

  /// Synchronous. Unary.
  func get(_ request: NoteRequestId, metadata customMetadata: Metadata) throws -> Note
  /// Asynchronous. Unary.
  @discardableResult
  func get(_ request: NoteRequestId, metadata customMetadata: Metadata, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceGetCall

  /// Synchronous. Unary.
  func insert(_ request: Note, metadata customMetadata: Metadata) throws -> Note
  /// Asynchronous. Unary.
  @discardableResult
  func insert(_ request: Note, metadata customMetadata: Metadata, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceInsertCall

  /// Synchronous. Unary.
  func update(_ request: Note, metadata customMetadata: Metadata) throws -> Note
  /// Asynchronous. Unary.
  @discardableResult
  func update(_ request: Note, metadata customMetadata: Metadata, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceUpdateCall

  /// Synchronous. Unary.
  func delete(_ request: NoteRequestId, metadata customMetadata: Metadata) throws -> Empty
  /// Asynchronous. Unary.
  @discardableResult
  func delete(_ request: NoteRequestId, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> NoteServiceDeleteCall

}

internal extension NoteServiceService {
  /// Synchronous. Unary.
  func list(_ request: Empty) throws -> NoteList {
    return try self.list(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func list(_ request: Empty, completion: @escaping (NoteList?, CallResult) -> Void) throws -> NoteServiceListCall {
    return try self.list(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func get(_ request: NoteRequestId) throws -> Note {
    return try self.get(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func get(_ request: NoteRequestId, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceGetCall {
    return try self.get(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func insert(_ request: Note) throws -> Note {
    return try self.insert(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func insert(_ request: Note, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceInsertCall {
    return try self.insert(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func update(_ request: Note) throws -> Note {
    return try self.update(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func update(_ request: Note, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceUpdateCall {
    return try self.update(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func delete(_ request: NoteRequestId) throws -> Empty {
    return try self.delete(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func delete(_ request: NoteRequestId, completion: @escaping (Empty?, CallResult) -> Void) throws -> NoteServiceDeleteCall {
    return try self.delete(request, metadata: self.metadata, completion: completion)
  }

}

internal final class NoteServiceServiceClient: ServiceClientBase, NoteServiceService {
  /// Synchronous. Unary.
  internal func list(_ request: Empty, metadata customMetadata: Metadata) throws -> NoteList {
    return try NoteServiceListCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func list(_ request: Empty, metadata customMetadata: Metadata, completion: @escaping (NoteList?, CallResult) -> Void) throws -> NoteServiceListCall {
    return try NoteServiceListCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func get(_ request: NoteRequestId, metadata customMetadata: Metadata) throws -> Note {
    return try NoteServiceGetCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func get(_ request: NoteRequestId, metadata customMetadata: Metadata, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceGetCall {
    return try NoteServiceGetCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func insert(_ request: Note, metadata customMetadata: Metadata) throws -> Note {
    return try NoteServiceInsertCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func insert(_ request: Note, metadata customMetadata: Metadata, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceInsertCall {
    return try NoteServiceInsertCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func update(_ request: Note, metadata customMetadata: Metadata) throws -> Note {
    return try NoteServiceUpdateCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func update(_ request: Note, metadata customMetadata: Metadata, completion: @escaping (Note?, CallResult) -> Void) throws -> NoteServiceUpdateCall {
    return try NoteServiceUpdateCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func delete(_ request: NoteRequestId, metadata customMetadata: Metadata) throws -> Empty {
    return try NoteServiceDeleteCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func delete(_ request: NoteRequestId, metadata customMetadata: Metadata, completion: @escaping (Empty?, CallResult) -> Void) throws -> NoteServiceDeleteCall {
    return try NoteServiceDeleteCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol NoteServiceProvider: ServiceProvider {
  func list(request: Empty, session: NoteServiceListSession) throws -> NoteList
  func get(request: NoteRequestId, session: NoteServiceGetSession) throws -> Note
  func insert(request: Note, session: NoteServiceInsertSession) throws -> Note
  func update(request: Note, session: NoteServiceUpdateSession) throws -> Note
  func delete(request: NoteRequestId, session: NoteServiceDeleteSession) throws -> Empty
}

extension NoteServiceProvider {
  internal var serviceName: String { return "NoteService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/NoteService/List":
      return try NoteServiceListSessionBase(
        handler: handler,
        providerBlock: { try self.list(request: $0, session: $1 as! NoteServiceListSessionBase) })
          .run()
    case "/NoteService/Get":
      return try NoteServiceGetSessionBase(
        handler: handler,
        providerBlock: { try self.get(request: $0, session: $1 as! NoteServiceGetSessionBase) })
          .run()
    case "/NoteService/Insert":
      return try NoteServiceInsertSessionBase(
        handler: handler,
        providerBlock: { try self.insert(request: $0, session: $1 as! NoteServiceInsertSessionBase) })
          .run()
    case "/NoteService/Update":
      return try NoteServiceUpdateSessionBase(
        handler: handler,
        providerBlock: { try self.update(request: $0, session: $1 as! NoteServiceUpdateSessionBase) })
          .run()
    case "/NoteService/Delete":
      return try NoteServiceDeleteSessionBase(
        handler: handler,
        providerBlock: { try self.delete(request: $0, session: $1 as! NoteServiceDeleteSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol NoteServiceListSession: ServerSessionUnary {}

fileprivate final class NoteServiceListSessionBase: ServerSessionUnaryBase<Empty, NoteList>, NoteServiceListSession {}

internal protocol NoteServiceGetSession: ServerSessionUnary {}

fileprivate final class NoteServiceGetSessionBase: ServerSessionUnaryBase<NoteRequestId, Note>, NoteServiceGetSession {}

internal protocol NoteServiceInsertSession: ServerSessionUnary {}

fileprivate final class NoteServiceInsertSessionBase: ServerSessionUnaryBase<Note, Note>, NoteServiceInsertSession {}

internal protocol NoteServiceUpdateSession: ServerSessionUnary {}

fileprivate final class NoteServiceUpdateSessionBase: ServerSessionUnaryBase<Note, Note>, NoteServiceUpdateSession {}

internal protocol NoteServiceDeleteSession: ServerSessionUnary {}

fileprivate final class NoteServiceDeleteSessionBase: ServerSessionUnaryBase<NoteRequestId, Empty>, NoteServiceDeleteSession {}

